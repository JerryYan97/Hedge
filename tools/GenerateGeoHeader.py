## TODO: Discard tinyObj's geometry load. We directly load geometry here and arranage that into UBO format before hand.
# Taking in the .obj model file and generating the vertex UBO into the header file.
import os

def GenerateGeoUBO(geoNamePath):
    with open(geoNamePath, mode='r') as file:
        vertList = []
        idxList = []
        vertPosList = []
        vertNormalList = []
        vertUvList = []
        arrayName = ""
        vertDict = dict()
        idxCnt = 0
        while True:
            line = file.readline()
            if line == "":
                break
            # Collect vert info: pos, normal, uv.
            lineList = line.rsplit()
            if lineList[0] == "o":
                # Give the name of the object
                arrayName = lineList[1]
            elif lineList[0] == "v":
                oneVertTriple = [float(lineList[1]), float(lineList[2]), float(lineList[3])]
                vertPosList.append(oneVertTriple)
            elif lineList[0] == "vt":
                oneUvTriple = [float(lineList[1]), float(lineList[2])]
                vertUvList.append(oneUvTriple)
            elif lineList[0] == "vn":
                oneNormalTriple = [float(lineList[1]), float(lineList[2]), float(lineList[3])]
                vertNormalList.append(oneNormalTriple)
            elif lineList[0] == "f":
                # Update the unrepeated vertex dictionary
                for i in range(1, 4):
                    if lineList[i] not in vertDict:
                        vertDict[lineList[i]] = idxCnt
                        idxCnt += 1
                    idxList.append(vertDict[lineList[i]])

        sortedVertDict = sorted(vertDict.items(), key=lambda x:x[1])

        for vertTuple in sortedVertDict:
            vertIdxTriple = vertTuple[0].rsplit("/")
            posIdx = int(vertIdxTriple[0]) - 1
            uvIdx = int(vertIdxTriple[1]) - 1
            normalIdx = int(vertIdxTriple[2]) - 1
            vertPos = vertPosList[posIdx]
            vertNormal = vertNormalList[normalIdx]
            vertUv = vertUvList[uvIdx]
            vert = []
            vert.extend(vertPos)
            vert.extend(vertNormal)
            vert.extend(vertUv)
            vertList.append(vert)

        return [arrayName, vertList, idxList]

def GenerateHeader(headerPathName, geoUBOInfoArrayList):
    if os.path.exists(headerPathName):
        os.remove(headerPathName)
    headerHandle = open(headerPathName, "w")
    headerHandle.write("#pragma once\n\n")
    headerHandle.write("// NOTE: Generated by GenerateGeoHeader.py. Don't modify it manually!\n")
    headerHandle.write("// UBO FORMAT: pos(3), normal(3), uv(2).\n\n")
    headerHandle.write("namespace Hedge {\n\n")

    for geoUboInfo in geoUBOInfoArrayList:
        # Generate UBO data
        headerHandle.write("    const float " + geoUboInfo[0] + "UboData" + "[] = {\n")
        arrayStr = ""
        for vert in geoUboInfo[1]:
            vertStr = ""
            for val in vert:
                vertStr += (str(val) + ", ")
            arrayStr += ("        " + vertStr[:-1] + "\n")
        headerHandle.write(arrayStr[:-2] + "\n")
        headerHandle.write("    }\n\n")

        # Generate Idx data
        headerHandle.write("    const uint32_t " + geoUboInfo[0] + "IdxData" + "[] = {\n")
        idxDataStr = "        "
        newLineCnt = 1
        for idx in geoUboInfo[2]:
            aIdxStr = str(idx) + ", "
            if newLineCnt % 9 == 0 and newLineCnt != 0:
                aIdxStr = (aIdxStr[:-1] + "\n        ")
            idxDataStr += aIdxStr
            newLineCnt += 1
        if idxDataStr[-1] == ",":
            headerHandle.write(idxDataStr[:-1] + "\n")
        else:
            headerHandle.write(idxDataStr[:-10] + "\n")
        headerHandle.write("    }\n\n")

    headerHandle.write("}")


if __name__ == "__main__":
    geoPath = os.getcwd() + "\\..\\builtInModels\\models"
    generator = os.walk(geoPath)
    info = next(generator)
    geoArrayList = []
    for modelName in info[2]:
        geoArrayList.append(GenerateGeoUBO(geoPath + "\\" + modelName))
        GenerateHeader(os.getcwd() + "\\..\\builtInModels\\g_builtInModels.h", geoArrayList)